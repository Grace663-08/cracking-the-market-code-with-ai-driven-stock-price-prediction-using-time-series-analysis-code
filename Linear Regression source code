# ✅ 1. Import Libraries
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split

# ✅ 2. Generate Synthetic Data
np.random.seed(42)  # For reproducibility

# Generate feature data (X) and target variable (y) using y = 1 + 2*x + noise
X = 2 * np.random.rand(100, 1)
y = 1 + 2 * X + np.random.randn(100, 1)

# ✅ 3. Split Data into Training and Testing Sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

print(f"Training data points: {X_train.shape[0]}")
print(f"Testing data points: {X_test.shape[0]}")

# ✅ 4. Create and Train the Model
model = LinearRegression()
model.fit(X_train, y_train)

# ✅ 5. Evaluate the Model
score = model.score(X_test, y_test)
print(f"\nModel R-squared score on test data: {score:.4f}")
print(f"Learned Intercept (c): {model.intercept_[0]:.4f}")
print(f"Learned Slope (m): {model.coef_[0][0]:.4f}")

# ✅ 6. Make a Prediction
X_new = np.array([[1.5]])
y_pred = model.predict(X_new)
print(f"\nPrediction for X = {X_new[0][0]}: y = {y_pred[0][0]:.4f}")

# ✅ 7. Visualize the Results
y_pred_line = model.predict(X_test)

plt.figure(figsize=(10, 6))
plt.scatter(X_train, y_train, color='blue', label='Training Data', alpha=0.7)
plt.scatter(X_test, y_test, color='green', label='Testing Data', alpha=0.7)
plt.plot(X_test, y_pred_line, color='red', linewidth=2, label='Regression Line')
plt.xlabel('X')
plt.ylabel('y')
plt.title('Linear Regression Example')
plt.legend()
plt.show()
